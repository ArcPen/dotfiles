snippet s
r.send("${1}")
endsnippet

snippet sl
r.sendline("${1}")
endsnippet

snippet sa
r.sendafter("${1}", ${2:payload})
endsnippet

snippet sla
r.sendlineafter("${1}", ${2:payload})
endsnippet

snippet r
r.recv(${1})
endsnippet

snippet rl
r.recvline()
endsnippet

snippet ru
r.recvuntil("${1}")
endsnippet

snippet ri
r.interactive()
endsnippet

snippet p
p64(${1})
endsnippet

snippet pwn
from pwn import *
context.arch = "${1:amd64}"
context.log_level = "debug"
endsnippet

snippet csu
def ret2csu(rdi,rsi,rdx,func_got):
	return p64(0)+p64(1)+p64(func_got)+p64(rdx)+p64(rsi)+p64(rdi)+p64(${1:csubase})+"a"*8
endsnippet

snippet packfile
def pack_file(_flags = 0,
		_IO_read_ptr = 0,
		_IO_read_end = 0,
		_IO_read_base = 0,
		_IO_write_base = 0,
		_IO_write_ptr = 0,
		_IO_write_end = 0,
		_IO_buf_base = 0,
		_IO_buf_end = 0,
		_IO_save_base = 0,
		_IO_backup_base = 0,
		_IO_save_end = 0,
		_IO_marker = 0,
		_IO_chain = 0,
		_fileno = 0,
		_lock = 0):
	struct = p32(_flags) + \
	p32(0) + \
	p64(_IO_read_ptr) + \
	p64(_IO_read_end) + \
	p64(_IO_read_base) + \
	p64(_IO_write_base) + \
	p64(_IO_write_ptr) + \
	p64(_IO_write_end) + \
	p64(_IO_buf_base) + \
	p64(_IO_buf_end) + \
	p64(_IO_save_base) + \
	p64(_IO_backup_base) + \
	p64(_IO_save_end) + \
	p64(_IO_marker) + \
	p64(_IO_chain) + \
	p32(_fileno)
	struct = struct.ljust(0x88, "\x00")
	struct += p64(_lock)
	struct = struct.ljust(0xd8, "\x00")
	return struct
endsnippet
